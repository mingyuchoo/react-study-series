schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "baby"
"""
type baby {
  id: Int!
  name: String!
  status: Int
}

"""
aggregated selection of "baby"
"""
type baby_aggregate {
  aggregate: baby_aggregate_fields
  nodes: [baby!]!
}

"""
aggregate fields of "baby"
"""
type baby_aggregate_fields {
  avg: baby_avg_fields
  count(columns: [baby_select_column!], distinct: Boolean): Int!
  max: baby_max_fields
  min: baby_min_fields
  stddev: baby_stddev_fields
  stddev_pop: baby_stddev_pop_fields
  stddev_samp: baby_stddev_samp_fields
  sum: baby_sum_fields
  var_pop: baby_var_pop_fields
  var_samp: baby_var_samp_fields
  variance: baby_variance_fields
}

"""aggregate avg on columns"""
type baby_avg_fields {
  id: Float
  status: Float
}

"""
Boolean expression to filter rows from the table "baby". All fields are combined with a logical 'AND'.
"""
input baby_bool_exp {
  _and: [baby_bool_exp!]
  _not: baby_bool_exp
  _or: [baby_bool_exp!]
  id: Int_comparison_exp
  name: String_comparison_exp
  status: Int_comparison_exp
}

"""
unique or primary key constraints on table "baby"
"""
enum baby_constraint {
  """unique or primary key constraint"""
  baby_name_key

  """unique or primary key constraint"""
  test_pkey
}

"""
input type for incrementing numeric columns in table "baby"
"""
input baby_inc_input {
  id: Int
  status: Int
}

"""
input type for inserting data into table "baby"
"""
input baby_insert_input {
  id: Int
  name: String
  status: Int
}

"""aggregate max on columns"""
type baby_max_fields {
  id: Int
  name: String
  status: Int
}

"""aggregate min on columns"""
type baby_min_fields {
  id: Int
  name: String
  status: Int
}

"""
response of any mutation on the table "baby"
"""
type baby_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [baby!]!
}

"""
on conflict condition type for table "baby"
"""
input baby_on_conflict {
  constraint: baby_constraint!
  update_columns: [baby_update_column!]! = []
  where: baby_bool_exp
}

"""Ordering options when selecting data from "baby"."""
input baby_order_by {
  id: order_by
  name: order_by
  status: order_by
}

"""primary key columns input for table: baby"""
input baby_pk_columns_input {
  id: Int!
}

"""
select columns of table "baby"
"""
enum baby_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  status
}

"""
input type for updating data in table "baby"
"""
input baby_set_input {
  id: Int
  name: String
  status: Int
}

"""aggregate stddev on columns"""
type baby_stddev_fields {
  id: Float
  status: Float
}

"""aggregate stddev_pop on columns"""
type baby_stddev_pop_fields {
  id: Float
  status: Float
}

"""aggregate stddev_samp on columns"""
type baby_stddev_samp_fields {
  id: Float
  status: Float
}

"""aggregate sum on columns"""
type baby_sum_fields {
  id: Int
  status: Int
}

"""
update columns of table "baby"
"""
enum baby_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  status
}

"""aggregate var_pop on columns"""
type baby_var_pop_fields {
  id: Float
  status: Float
}

"""aggregate var_samp on columns"""
type baby_var_samp_fields {
  id: Float
  status: Float
}

"""aggregate variance on columns"""
type baby_variance_fields {
  id: Float
  status: Float
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "baby"
  """
  delete_baby(
    """filter the rows which have to be deleted"""
    where: baby_bool_exp!
  ): baby_mutation_response

  """
  delete single row from the table: "baby"
  """
  delete_baby_by_pk(id: Int!): baby

  """
  delete data from the table: "organization"
  """
  delete_organization(
    """filter the rows which have to be deleted"""
    where: organization_bool_exp!
  ): organization_mutation_response

  """
  delete single row from the table: "organization"
  """
  delete_organization_by_pk(id: Int!): organization

  """
  insert data into the table: "baby"
  """
  insert_baby(
    """the rows to be inserted"""
    objects: [baby_insert_input!]!

    """on conflict condition"""
    on_conflict: baby_on_conflict
  ): baby_mutation_response

  """
  insert a single row into the table: "baby"
  """
  insert_baby_one(
    """the row to be inserted"""
    object: baby_insert_input!

    """on conflict condition"""
    on_conflict: baby_on_conflict
  ): baby

  """
  insert data into the table: "organization"
  """
  insert_organization(
    """the rows to be inserted"""
    objects: [organization_insert_input!]!

    """on conflict condition"""
    on_conflict: organization_on_conflict
  ): organization_mutation_response

  """
  insert a single row into the table: "organization"
  """
  insert_organization_one(
    """the row to be inserted"""
    object: organization_insert_input!

    """on conflict condition"""
    on_conflict: organization_on_conflict
  ): organization

  """
  update data of the table: "baby"
  """
  update_baby(
    """increments the numeric columns with given value of the filtered values"""
    _inc: baby_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: baby_set_input

    """filter the rows which have to be updated"""
    where: baby_bool_exp!
  ): baby_mutation_response

  """
  update single row of the table: "baby"
  """
  update_baby_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: baby_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: baby_set_input
    pk_columns: baby_pk_columns_input!
  ): baby

  """
  update data of the table: "organization"
  """
  update_organization(
    """increments the numeric columns with given value of the filtered values"""
    _inc: organization_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: organization_set_input

    """filter the rows which have to be updated"""
    where: organization_bool_exp!
  ): organization_mutation_response

  """
  update single row of the table: "organization"
  """
  update_organization_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: organization_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: organization_set_input
    pk_columns: organization_pk_columns_input!
  ): organization
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "organization"
"""
type organization {
  activated: Boolean!
  id: Int!
  name: String!
}

"""
aggregated selection of "organization"
"""
type organization_aggregate {
  aggregate: organization_aggregate_fields
  nodes: [organization!]!
}

"""
aggregate fields of "organization"
"""
type organization_aggregate_fields {
  avg: organization_avg_fields
  count(columns: [organization_select_column!], distinct: Boolean): Int!
  max: organization_max_fields
  min: organization_min_fields
  stddev: organization_stddev_fields
  stddev_pop: organization_stddev_pop_fields
  stddev_samp: organization_stddev_samp_fields
  sum: organization_sum_fields
  var_pop: organization_var_pop_fields
  var_samp: organization_var_samp_fields
  variance: organization_variance_fields
}

"""aggregate avg on columns"""
type organization_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "organization". All fields are combined with a logical 'AND'.
"""
input organization_bool_exp {
  _and: [organization_bool_exp!]
  _not: organization_bool_exp
  _or: [organization_bool_exp!]
  activated: Boolean_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "organization"
"""
enum organization_constraint {
  """unique or primary key constraint"""
  organization_name_key

  """unique or primary key constraint"""
  organization_pkey
}

"""
input type for incrementing numeric columns in table "organization"
"""
input organization_inc_input {
  id: Int
}

"""
input type for inserting data into table "organization"
"""
input organization_insert_input {
  activated: Boolean
  id: Int
  name: String
}

"""aggregate max on columns"""
type organization_max_fields {
  id: Int
  name: String
}

"""aggregate min on columns"""
type organization_min_fields {
  id: Int
  name: String
}

"""
response of any mutation on the table "organization"
"""
type organization_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [organization!]!
}

"""
on conflict condition type for table "organization"
"""
input organization_on_conflict {
  constraint: organization_constraint!
  update_columns: [organization_update_column!]! = []
  where: organization_bool_exp
}

"""Ordering options when selecting data from "organization"."""
input organization_order_by {
  activated: order_by
  id: order_by
  name: order_by
}

"""primary key columns input for table: organization"""
input organization_pk_columns_input {
  id: Int!
}

"""
select columns of table "organization"
"""
enum organization_select_column {
  """column name"""
  activated

  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "organization"
"""
input organization_set_input {
  activated: Boolean
  id: Int
  name: String
}

"""aggregate stddev on columns"""
type organization_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type organization_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type organization_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type organization_sum_fields {
  id: Int
}

"""
update columns of table "organization"
"""
enum organization_update_column {
  """column name"""
  activated

  """column name"""
  id

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type organization_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type organization_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type organization_variance_fields {
  id: Float
}

type query_root {
  """
  fetch data from the table: "baby"
  """
  baby(
    """distinct select on columns"""
    distinct_on: [baby_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [baby_order_by!]

    """filter the rows returned"""
    where: baby_bool_exp
  ): [baby!]!

  """
  fetch aggregated fields from the table: "baby"
  """
  baby_aggregate(
    """distinct select on columns"""
    distinct_on: [baby_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [baby_order_by!]

    """filter the rows returned"""
    where: baby_bool_exp
  ): baby_aggregate!

  """fetch data from the table: "baby" using primary key columns"""
  baby_by_pk(id: Int!): baby

  """
  fetch data from the table: "organization"
  """
  organization(
    """distinct select on columns"""
    distinct_on: [organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_order_by!]

    """filter the rows returned"""
    where: organization_bool_exp
  ): [organization!]!

  """
  fetch aggregated fields from the table: "organization"
  """
  organization_aggregate(
    """distinct select on columns"""
    distinct_on: [organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_order_by!]

    """filter the rows returned"""
    where: organization_bool_exp
  ): organization_aggregate!

  """fetch data from the table: "organization" using primary key columns"""
  organization_by_pk(id: Int!): organization
}

type subscription_root {
  """
  fetch data from the table: "baby"
  """
  baby(
    """distinct select on columns"""
    distinct_on: [baby_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [baby_order_by!]

    """filter the rows returned"""
    where: baby_bool_exp
  ): [baby!]!

  """
  fetch aggregated fields from the table: "baby"
  """
  baby_aggregate(
    """distinct select on columns"""
    distinct_on: [baby_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [baby_order_by!]

    """filter the rows returned"""
    where: baby_bool_exp
  ): baby_aggregate!

  """fetch data from the table: "baby" using primary key columns"""
  baby_by_pk(id: Int!): baby

  """
  fetch data from the table: "organization"
  """
  organization(
    """distinct select on columns"""
    distinct_on: [organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_order_by!]

    """filter the rows returned"""
    where: organization_bool_exp
  ): [organization!]!

  """
  fetch aggregated fields from the table: "organization"
  """
  organization_aggregate(
    """distinct select on columns"""
    distinct_on: [organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_order_by!]

    """filter the rows returned"""
    where: organization_bool_exp
  ): organization_aggregate!

  """fetch data from the table: "organization" using primary key columns"""
  organization_by_pk(id: Int!): organization
}

